{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _flatten2 = _interopRequireDefault(require(\"lodash/flatten\"));\n\nvar _times2 = _interopRequireDefault(require(\"lodash/times\"));\n\nvar _wrapCell = _interopRequireDefault(require(\"./wrapCell\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @param {Array} unmappedRows\n * @param {number[]} rowHeightIndex\n * @param {Object} config\n * @returns {Array}\n */\n\n\nvar mapDataUsingRowHeightIndex = function mapDataUsingRowHeightIndex(unmappedRows, rowHeightIndex, config) {\n  var tableWidth = unmappedRows[0].length;\n  var mappedRows = unmappedRows.map(function (cells, index0) {\n    var rowHeight = (0, _times2.default)(rowHeightIndex[index0], function () {\n      return new Array(tableWidth).fill('');\n    }); // rowHeight\n    //     [{row index within rowSaw; index2}]\n    //     [{cell index within a virtual row; index1}]\n\n    cells.forEach(function (value, index1) {\n      var cellLines = (0, _wrapCell.default)(value, config.columns[index1].width, config.columns[index1].wrapWord);\n      cellLines.forEach(function (cellLine, index2) {\n        rowHeight[index2][index1] = cellLine;\n      });\n    });\n    return rowHeight;\n  });\n  return (0, _flatten2.default)(mappedRows);\n};\n\nvar _default = mapDataUsingRowHeightIndex;\nexports.default = _default;","map":{"version":3,"sources":["../src/mapDataUsingRowHeightIndex.js"],"names":["unmappedRows","rowHeightIndex","config","tableWidth","mappedRows","rowHeight","cells","cellLines"],"mappings":";;;;;;;;;;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;;;;;;AAEA;;;;;;;;qEAMgBA,Y,EAAcC,c,EAAgBC,M,EAAW;AACvD,MAAMC,UAAU,GAAGH,YAAY,CAAZA,CAAY,CAAZA,CAAnB,MAAA;AAEA,MAAMI,UAAU,GAAG,YAAY,CAAZ,GAAA,CAAiB,UAAA,KAAA,EAAA,MAAA,EAAmB;AACrD,QAAMC,SAAS,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAQJ,cAAc,CAAtB,MAAsB,CAAtB,EAAgC,YAAM;AACtD,aAAO,IAAA,KAAA,CAAA,UAAA,EAAA,IAAA,CAAP,EAAO,CAAP;AAFmD,KACnC,CAAlB,CADqD,CAKrD;AACA;AACA;;AAEAK,IAAAA,KAAK,CAALA,OAAAA,CAAc,UAAA,KAAA,EAAA,MAAA,EAAmB;AAC/B,UAAMC,SAAS,GAAG,CAAA,GAAA,SAAA,CAAA,OAAA,EAAA,KAAA,EAAgBL,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAAhB,KAAA,EAA8CA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAAhE,QAAkB,CAAlB;AAEAK,MAAAA,SAAS,CAATA,OAAAA,CAAkB,UAAA,QAAA,EAAA,MAAA,EAAsB;AACtCF,QAAAA,SAAS,CAATA,MAAS,CAATA,CAAAA,MAAAA,IAAAA,QAAAA;AADFE,OAAAA;AAHFD,KAAAA;AAQA,WAAA,SAAA;AAjBF,GAAmB,CAAnB;AAoBA,SAAO,CAAA,GAAA,SAAA,CAAA,OAAA,EAAP,UAAO,CAAP","sourcesContent":["import _ from 'lodash';\nimport wrapCell from './wrapCell';\n\n/**\n * @param {Array} unmappedRows\n * @param {number[]} rowHeightIndex\n * @param {Object} config\n * @returns {Array}\n */\nexport default (unmappedRows, rowHeightIndex, config) => {\n  const tableWidth = unmappedRows[0].length;\n\n  const mappedRows = unmappedRows.map((cells, index0) => {\n    const rowHeight = _.times(rowHeightIndex[index0], () => {\n      return new Array(tableWidth).fill('');\n    });\n\n    // rowHeight\n    //     [{row index within rowSaw; index2}]\n    //     [{cell index within a virtual row; index1}]\n\n    cells.forEach((value, index1) => {\n      const cellLines = wrapCell(value, config.columns[index1].width, config.columns[index1].wrapWord);\n\n      cellLines.forEach((cellLine, index2) => {\n        rowHeight[index2][index1] = cellLine;\n      });\n    });\n\n    return rowHeight;\n  });\n\n  return _.flatten(mappedRows);\n};\n"]},"metadata":{},"sourceType":"script"}