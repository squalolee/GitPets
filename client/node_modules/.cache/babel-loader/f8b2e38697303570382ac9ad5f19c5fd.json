{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/napsche/Desktop/Class/Project3/GitPets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/napsche/Desktop/Class/Project3/GitPets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/napsche/Desktop/Class/Project3/GitPets/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar isFullwidthCodePoint = require('is-fullwidth-code-point');\n\nvar astralRegex = require('astral-regex');\n\nvar ansiStyles = require('ansi-styles');\n\nvar ESCAPES = [\"\\x1B\", \"\\x9B\"];\nvar END_CODE = 39;\n\nvar wrapAnsi = function wrapAnsi(code) {\n  return \"\".concat(ESCAPES[0], \"[\").concat(code, \"m\");\n};\n\nmodule.exports = function (str, begin, end) {\n  var arr = _toConsumableArray(str.normalize());\n\n  end = typeof end === 'number' ? end : arr.length;\n  var insideEscape = false;\n  var escapeCode = null;\n  var visible = 0;\n  var output = '';\n\n  var _iterator = _createForOfIteratorHelper(arr.entries()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          i = _step$value[0],\n          x = _step$value[1];\n\n      var leftEscape = false;\n\n      if (ESCAPES.includes(x)) {\n        insideEscape = true;\n        var code = /\\d[^m]*/.exec(str.slice(i, i + 18));\n        escapeCode = code === END_CODE ? null : code;\n      } else if (insideEscape && x === 'm') {\n        insideEscape = false;\n        leftEscape = true;\n      }\n\n      if (!insideEscape && !leftEscape) {\n        ++visible;\n      }\n\n      if (!astralRegex({\n        exact: true\n      }).test(x) && isFullwidthCodePoint(x.codePointAt())) {\n        ++visible;\n      }\n\n      if (visible > begin && visible <= end) {\n        output += x;\n      } else if (visible === begin && !insideEscape && escapeCode !== null && escapeCode !== END_CODE) {\n        output += wrapAnsi(escapeCode);\n      } else if (visible >= end) {\n        if (escapeCode !== null) {\n          output += wrapAnsi(ansiStyles.codes.get(parseInt(escapeCode, 10)) || END_CODE);\n        }\n\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return output;\n};","map":{"version":3,"sources":["/Users/napsche/Desktop/Class/Project3/GitPets/node_modules/slice-ansi/index.js"],"names":["isFullwidthCodePoint","require","astralRegex","ansiStyles","ESCAPES","END_CODE","wrapAnsi","code","module","exports","str","begin","end","arr","normalize","length","insideEscape","escapeCode","visible","output","entries","i","x","leftEscape","includes","exec","slice","exact","test","codePointAt","codes","get","parseInt"],"mappings":"AAAA;;;;;;;;AACA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,yBAAD,CAApC;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAA3B;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AAEA,IAAMG,OAAO,GAAG,CACf,MADe,EAEf,MAFe,CAAhB;AAKA,IAAMC,QAAQ,GAAG,EAAjB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,IAAI;AAAA,mBAAOH,OAAO,CAAC,CAAD,CAAd,cAAqBG,IAArB;AAAA,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,KAAN,EAAaC,GAAb,EAAqB;AACrC,MAAMC,GAAG,sBAAOH,GAAG,CAACI,SAAJ,EAAP,CAAT;;AAEAF,EAAAA,GAAG,GAAG,OAAOA,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCC,GAAG,CAACE,MAA1C;AAEA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,MAAM,GAAG,EAAb;;AARqC,6CAUhBN,GAAG,CAACO,OAAJ,EAVgB;AAAA;;AAAA;AAUrC,wDAAoC;AAAA;AAAA,UAAxBC,CAAwB;AAAA,UAArBC,CAAqB;;AACnC,UAAIC,UAAU,GAAG,KAAjB;;AAEA,UAAInB,OAAO,CAACoB,QAAR,CAAiBF,CAAjB,CAAJ,EAAyB;AACxBN,QAAAA,YAAY,GAAG,IAAf;AACA,YAAMT,IAAI,GAAG,UAAUkB,IAAV,CAAef,GAAG,CAACgB,KAAJ,CAAUL,CAAV,EAAaA,CAAC,GAAG,EAAjB,CAAf,CAAb;AACAJ,QAAAA,UAAU,GAAGV,IAAI,KAAKF,QAAT,GAAoB,IAApB,GAA2BE,IAAxC;AACA,OAJD,MAIO,IAAIS,YAAY,IAAIM,CAAC,KAAK,GAA1B,EAA+B;AACrCN,QAAAA,YAAY,GAAG,KAAf;AACAO,QAAAA,UAAU,GAAG,IAAb;AACA;;AAED,UAAI,CAACP,YAAD,IAAiB,CAACO,UAAtB,EAAkC;AACjC,UAAEL,OAAF;AACA;;AAED,UAAI,CAAChB,WAAW,CAAC;AAACyB,QAAAA,KAAK,EAAE;AAAR,OAAD,CAAX,CAA2BC,IAA3B,CAAgCN,CAAhC,CAAD,IAAuCtB,oBAAoB,CAACsB,CAAC,CAACO,WAAF,EAAD,CAA/D,EAAkF;AACjF,UAAEX,OAAF;AACA;;AAED,UAAIA,OAAO,GAAGP,KAAV,IAAmBO,OAAO,IAAIN,GAAlC,EAAuC;AACtCO,QAAAA,MAAM,IAAIG,CAAV;AACA,OAFD,MAEO,IAAIJ,OAAO,KAAKP,KAAZ,IAAqB,CAACK,YAAtB,IAAsCC,UAAU,KAAK,IAArD,IAA6DA,UAAU,KAAKZ,QAAhF,EAA0F;AAChGc,QAAAA,MAAM,IAAIb,QAAQ,CAACW,UAAD,CAAlB;AACA,OAFM,MAEA,IAAIC,OAAO,IAAIN,GAAf,EAAoB;AAC1B,YAAIK,UAAU,KAAK,IAAnB,EAAyB;AACxBE,UAAAA,MAAM,IAAIb,QAAQ,CAACH,UAAU,CAAC2B,KAAX,CAAiBC,GAAjB,CAAqBC,QAAQ,CAACf,UAAD,EAAa,EAAb,CAA7B,KAAkDZ,QAAnD,CAAlB;AACA;;AAED;AACA;AACD;AAzCoC;AAAA;AAAA;AAAA;AAAA;;AA2CrC,SAAOc,MAAP;AACA,CA5CD","sourcesContent":["'use strict';\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\nconst astralRegex = require('astral-regex');\nconst ansiStyles = require('ansi-styles');\n\nconst ESCAPES = [\n\t'\\u001B',\n\t'\\u009B'\n];\n\nconst END_CODE = 39;\n\nconst wrapAnsi = code => `${ESCAPES[0]}[${code}m`;\n\nmodule.exports = (str, begin, end) => {\n\tconst arr = [...str.normalize()];\n\n\tend = typeof end === 'number' ? end : arr.length;\n\n\tlet insideEscape = false;\n\tlet escapeCode = null;\n\tlet visible = 0;\n\tlet output = '';\n\n\tfor (const [i, x] of arr.entries()) {\n\t\tlet leftEscape = false;\n\n\t\tif (ESCAPES.includes(x)) {\n\t\t\tinsideEscape = true;\n\t\t\tconst code = /\\d[^m]*/.exec(str.slice(i, i + 18));\n\t\t\tescapeCode = code === END_CODE ? null : code;\n\t\t} else if (insideEscape && x === 'm') {\n\t\t\tinsideEscape = false;\n\t\t\tleftEscape = true;\n\t\t}\n\n\t\tif (!insideEscape && !leftEscape) {\n\t\t\t++visible;\n\t\t}\n\n\t\tif (!astralRegex({exact: true}).test(x) && isFullwidthCodePoint(x.codePointAt())) {\n\t\t\t++visible;\n\t\t}\n\n\t\tif (visible > begin && visible <= end) {\n\t\t\toutput += x;\n\t\t} else if (visible === begin && !insideEscape && escapeCode !== null && escapeCode !== END_CODE) {\n\t\t\toutput += wrapAnsi(escapeCode);\n\t\t} else if (visible >= end) {\n\t\t\tif (escapeCode !== null) {\n\t\t\t\toutput += wrapAnsi(ansiStyles.codes.get(parseInt(escapeCode, 10)) || END_CODE);\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn output;\n};\n"]},"metadata":{},"sourceType":"script"}